{"version":3,"sources":["action.ts","initialState.ts","Model.ts","reducer.ts","util.ts","components/BouncyLabel.tsx","components/TileButton.tsx","components/Business/CollectIncomeButton.tsx","components/Business/HireManagerButton.tsx","components/Business/UnboughtBusiness.tsx","components/Business/UpgradeButton.tsx","components/Business/index.tsx","components/Businesses.tsx","components/UpgradeMultiplier.tsx","components/App.tsx","index.tsx"],"names":["startCollectingIncome","index","dispatch","getState","business","businesses","type","setTimeout","hasManager","finishCollectingIncome","incomeCooldownDuration","upgradeBusiness","properties","LOCAL_STORAGE_KEY","hydrateState","persistedData","localStorage","getItem","JSON","parse","timestamp","state","incomeMade","timeElapsedMs","reduce","sum","Math","floor","income","level","calculateIncomeMadeWhileAbsent","Date","now","capital","forEach","initialState","upgradeMultiplier","name","price","managerPrice","PRICE_LEVEL_MULTIPLIER","UPGRADE_MULTIPLIER_LEVELS","INCOME_SPEED_DOUBLING_THRESHOLDS","thresholdsReached","i","length","reducer","action","produce","draft","collectingIncome","multiplier","round","Model","thresholdsPassed","pow","nextIndex","indexOf","currencyFormatter","Intl","NumberFormat","style","currency","formatCurrency","amount","format","BouncyLabel","props","useState","isAnimating","setIsAnimating","useEffect","children","className","onAnimationEnd","TileButton","role","disabled","progress","rest","CollectIncomeButton","canCollectIncome","onClick","HireManagerButton","canHireManager","UnboughtBusiness","canBuy","UpgradeButton","currentPrice","calculatePrice","targetMultiplier","result","maxMultiplier","resolveMultiplier","canUpgrade","Business","Businesses","halfway","ceil","slice","map","key","UpgradeMultiplier","value","App","useThunkReducer","onBeforeUnload","_","dataToPersist","setItem","stringify","window","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d09a67e0.chunk.js","sourcesContent":["import { Thunk as ThunkAction } from 'react-hook-thunk-reducer'\nimport { Action, State } from './Model'\n\ntype Thunk = ThunkAction<State, Action>\n\nexport function startCollectingIncome(index: number): Thunk {\n  return (dispatch, getState) => {\n    const business = getState().businesses[index]\n\n    dispatch({ type: 'collect-income-start', index })\n    setTimeout(\n      () => dispatch(finishCollectingIncome(index)),\n      business.incomeCooldownDuration\n    )\n  }\n}\n\nfunction finishCollectingIncome(index: number): Thunk {\n  return (dispatch, getState) => {\n    dispatch({ type: 'collect-income-done', index })\n\n    const business = getState().businesses[index]\n    if (business.hasManager) {\n      dispatch(startCollectingIncome(index))\n    }\n  }\n}\n\nexport function buyBusiness(index: number): Thunk {\n  return (dispatch, getState) => {\n    const business = getState().businesses[index]\n    dispatch(upgradeBusiness({ index, multiplier: 1, price: business.price }))\n  }\n}\n\nexport function upgradeBusiness(properties: {\n  index: number\n  multiplier: number\n  price: number\n}): Action {\n  return {\n    type: 'upgrade-business',\n    ...properties\n  }\n}\n\nexport function hireManager(index: number): Thunk {\n  return (dispatch, getState) => {\n    dispatch({ type: 'hire-manager', index })\n\n    const business = getState().businesses[index]\n    if (!business.collectingIncome) {\n      dispatch(startCollectingIncome(index))\n    }\n  }\n}\n\ninterface PersistedState {\n  state: State\n  timestamp: number\n}\nconst LOCAL_STORAGE_KEY = 'state'\n\nexport function persistState(): Thunk {\n  return (_, getState) => {\n    const state = getState()\n\n    const dataToPersist: PersistedState = {\n      state: {\n        ...state,\n        // Reset income collection progress:\n        businesses: state.businesses.map(business => ({\n          ...business,\n          collectingIncome: false\n        }))\n      },\n      timestamp: Date.now()\n    }\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(dataToPersist))\n  }\n}\n\nexport function hydrateState(): Thunk {\n  return dispatch => {\n    const persistedData = localStorage.getItem(LOCAL_STORAGE_KEY)\n    if (!persistedData) {\n      return\n    }\n\n    // Supplement previously persisted state with the income gained while absent:\n    const { timestamp, state } = JSON.parse(persistedData) as PersistedState\n    const incomeMade = calculateIncomeMadeWhileAbsent(\n      state,\n      Date.now() - timestamp\n    )\n    dispatch({\n      type: 'hydrate-state',\n      state: {\n        ...state,\n        capital: state.capital + incomeMade\n      }\n    })\n\n    // Restart managers:\n    state.businesses.forEach((business, index) => {\n      if (business.hasManager) {\n        dispatch(startCollectingIncome(index))\n      }\n    })\n  }\n}\n\nfunction calculateIncomeMadeWhileAbsent(\n  state: State,\n  timeElapsedMs: number\n): number {\n  return state.businesses.reduce((sum, business) => {\n    if (business.hasManager) {\n      const count = Math.floor(timeElapsedMs / business.incomeCooldownDuration)\n      return sum + count * business.income * business.level\n    }\n    return sum\n  }, 0)\n}\n","import { State } from './Model'\n\nconst initialState: State = {\n  capital: 0,\n  upgradeMultiplier: 1,\n  businesses: [\n    {\n      name: 'Lemonade Stand',\n      level: 1,\n      price: 4,\n      income: 1,\n      incomeCooldownDuration: 1000,\n      managerPrice: 1000\n    },\n    {\n      name: 'Newspaper Delivery',\n      level: 0,\n      price: 60,\n      income: 60,\n      incomeCooldownDuration: 3000,\n      managerPrice: 15_000\n    },\n    {\n      name: 'Car Wash',\n      level: 0,\n      price: 720,\n      income: 540,\n      incomeCooldownDuration: 6000,\n      managerPrice: 100_000\n    },\n    {\n      name: 'Pizza Delivery',\n      level: 0,\n      price: 8640,\n      income: 4320,\n      incomeCooldownDuration: 12_000,\n      managerPrice: 500_000\n    },\n    {\n      name: 'Donut Shop',\n      level: 0,\n      price: 103_680,\n      income: 51_840,\n      incomeCooldownDuration: 24_000,\n      managerPrice: 1_200_000\n    },\n    {\n      name: 'Shrimp Boat',\n      level: 0,\n      price: 1_244_160,\n      income: 622_080,\n      incomeCooldownDuration: 48_000,\n      managerPrice: 10_000_000\n    },\n    {\n      name: 'Hockey Team',\n      level: 0,\n      price: 14_929_920,\n      income: 7_464_960,\n      incomeCooldownDuration: 96_000,\n      managerPrice: 111_111_111\n    },\n    {\n      name: 'Movie Studio',\n      level: 0,\n      price: 179_159_040,\n      income: 89_579_520,\n      incomeCooldownDuration: 192_000,\n      managerPrice: 555_555_555\n    },\n    {\n      name: 'Bank',\n      level: 0,\n      price: 2_149_908_480,\n      income: 1_074_954_240,\n      incomeCooldownDuration: 384_000,\n      managerPrice: 10_000_000_000\n    },\n    {\n      name: 'Oil Company',\n      level: 0,\n      price: 25_798_901_760,\n      income: 12_899_450_880,\n      incomeCooldownDuration: 768_000,\n      managerPrice: 100_000_000_000\n    }\n  ]\n}\n\nexport default initialState\n","import { Dispatch as ReactDispatch } from 'react'\nimport { Thunk } from 'react-hook-thunk-reducer'\n\nexport interface State {\n  capital: number\n  businesses: Business[]\n\n  /** Upgrade multiple levels with one click */\n  upgradeMultiplier: UpgradeMultiplier\n}\n\nexport type UpgradeMultiplier = 1 | 10 | 100 | 'max'\n\n/** How much business price increases per level upgrade */\nexport const PRICE_LEVEL_MULTIPLIER = 1.14\n\nexport type Action =\n  | { type: 'collect-income-start'; index: number }\n  | { type: 'collect-income-done'; index: number }\n  | {\n      type: 'upgrade-business'\n      index: number\n      multiplier: number\n      price: number\n    }\n  | { type: 'hire-manager'; index: number }\n  | { type: 'toggle-upgrade-multiplier' }\n  | { type: 'hydrate-state'; state: State }\n\nexport type Dispatch = ReactDispatch<Action | Thunk<State, Action>>\n\nexport interface Business {\n  name: string\n  level: number\n  price: number\n\n  income: number\n  incomeCooldownDuration: number\n  collectingIncome?: boolean\n\n  hasManager?: boolean\n  managerPrice: number\n}\n","import { Reducer } from 'react'\nimport { produce } from 'immer'\nimport * as Model from './Model'\n\nconst UPGRADE_MULTIPLIER_LEVELS: Model.UpgradeMultiplier[] = [1, 10, 100, 'max']\n\nexport const INCOME_SPEED_DOUBLING_THRESHOLDS = [25, 50, 100, 200, 500]\n\nfunction thresholdsReached(level: number): number {\n  for (let i = INCOME_SPEED_DOUBLING_THRESHOLDS.length; i > 0; i--) {\n    if (level >= INCOME_SPEED_DOUBLING_THRESHOLDS[i - 1]) {\n      return i\n    }\n  }\n  return 0\n}\n\nconst reducer: Reducer<Model.State, Model.Action> = (\n  state: Model.State,\n  action: Model.Action\n) =>\n  produce(state, draft => {\n    switch (action.type) {\n      case 'collect-income-start': {\n        const business = draft.businesses[action.index]\n\n        business.collectingIncome = true\n        break\n      }\n      case 'collect-income-done': {\n        const business = draft.businesses[action.index]\n\n        business.collectingIncome = false\n        draft.capital += business.income * business.level\n        break\n      }\n      case 'upgrade-business': {\n        const business = draft.businesses[action.index]\n\n        if (state.capital < action.price) {\n          break\n        }\n\n        draft.capital -= action.price\n        business.level += action.multiplier\n        business.price = Math.round(action.price * Model.PRICE_LEVEL_MULTIPLIER)\n\n        // Double income collection speed when passing upgrade thresholds:\n        const thresholdsPassed =\n          thresholdsReached(business.level) -\n          thresholdsReached(business.level - action.multiplier)\n        business.incomeCooldownDuration /= Math.pow(2, thresholdsPassed)\n\n        break\n      }\n      case 'hire-manager': {\n        const business = draft.businesses[action.index]\n\n        draft.capital -= business.managerPrice\n        business.hasManager = true\n        break\n      }\n      case 'toggle-upgrade-multiplier': {\n        const nextIndex =\n          (UPGRADE_MULTIPLIER_LEVELS.indexOf(state.upgradeMultiplier) + 1) %\n          UPGRADE_MULTIPLIER_LEVELS.length\n\n        draft.upgradeMultiplier = UPGRADE_MULTIPLIER_LEVELS[nextIndex]\n        break\n      }\n      case 'hydrate-state': {\n        return action.state\n      }\n    }\n  })\n\nexport default reducer\n","const currencyFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n})\n\nexport const formatCurrency = (amount: number): string => {\n  if (amount >= 1_000_000) {\n    return currencyFormatter.format(amount / 1_000_000) + 'M'\n  }\n  return currencyFormatter.format(amount)\n}\n","import React, { useEffect, useState } from 'react'\nimport './BouncyLabel.css'\n\n/**\n * Label that displays a bounce animation when its contents change.\n */\nconst BouncyLabel: React.FC = props => {\n  const [isAnimating, setIsAnimating] = useState(false)\n  useEffect(() => setIsAnimating(true), [props.children])\n\n  return (\n    <b\n      className={`BouncyLabel ${isAnimating ? 'BouncyLabel-animate' : ''}`}\n      onAnimationEnd={() => setIsAnimating(false)}\n    >\n      {props.children}\n    </b>\n  )\n}\n\nexport default BouncyLabel\n","import React from 'react'\nimport './TileButton.css'\n\ninterface Props extends React.HTMLProps<HTMLDivElement> {\n  role?: 'primary' | 'secondary' | 'tertiary'\n  children?: React.ReactNode\n  disabled?: boolean\n  progress?: boolean\n}\n\nconst TileButton: React.FC<Props> = props => {\n  const { role, children, disabled, progress, ...rest } = props\n\n  const className = `TileButton TileButton-${role || 'primary'} ${\n    disabled ? 'TileButton-disabled' : ''\n  } ${progress ? 'TileButton-progress' : ''}`\n\n  return (\n    <div {...rest} className={className}>\n      {children}\n    </div>\n  )\n}\n\nexport default TileButton\n","import React from 'react'\nimport * as action from '../../action'\nimport * as Model from '../../Model'\nimport { formatCurrency } from '../../util'\nimport BouncyLabel from '../BouncyLabel'\nimport TileButton from '../TileButton'\n\ninterface Props {\n  business: Model.Business\n  dispatch: Model.Dispatch\n  index: number\n}\n\nconst CollectIncomeButton: React.FC<Props> = props => {\n  const { business, dispatch, index } = props\n  const canCollectIncome =\n    business.level > 0 && !business.collectingIncome && !business.hasManager\n\n  function collectIncome() {\n    if (canCollectIncome) {\n      dispatch(action.startCollectingIncome(index))\n    }\n  }\n\n  return (\n    <TileButton\n      disabled={!canCollectIncome}\n      onClick={collectIncome}\n      progress={business.collectingIncome}\n    >\n      {business.hasManager ? (\n        <>\n          <BouncyLabel>\n            {formatCurrency(business.level * business.income)}\n          </BouncyLabel>\n          <b>MANAGED</b>\n        </>\n      ) : (\n        <>\n          <b>COLLECT</b>\n          <BouncyLabel>\n            {formatCurrency(business.level * business.income)}\n          </BouncyLabel>\n          <b>INCOME</b>\n        </>\n      )}\n    </TileButton>\n  )\n}\n\nexport default CollectIncomeButton\n","import React from 'react'\nimport * as action from '../../action'\nimport * as Model from '../../Model'\nimport { formatCurrency } from '../../util'\nimport TileButton from '../TileButton'\n\ninterface Props {\n  business: Model.Business\n  capital: number\n  dispatch: Model.Dispatch\n  index: number\n}\n\nconst HireManagerButton: React.FC<Props> = props => {\n  const { business, capital, dispatch, index } = props\n  const canHireManager =\n    !business.hasManager &&\n    business.level > 0 &&\n    capital >= business.managerPrice\n\n  function hireManager() {\n    if (canHireManager) {\n      dispatch(action.hireManager(index))\n    }\n  }\n\n  return (\n    <TileButton\n      disabled={!canHireManager}\n      onClick={hireManager}\n      role=\"tertiary\"\n    >\n      <b>HIRE</b>\n      <span>{formatCurrency(business.managerPrice)}</span>\n      <b>MANAGER</b>\n    </TileButton>\n  )\n}\n\nexport default HireManagerButton\n","import React from 'react'\nimport * as Model from '../../Model'\nimport * as action from '../../action'\nimport { formatCurrency } from '../../util'\nimport TileButton from '../TileButton'\nimport './index.css'\n\ninterface Props {\n  business: Model.Business\n  capital: number\n  dispatch: Model.Dispatch\n  index: number\n}\n\nconst UnboughtBusiness: React.FC<Props> = props => {\n  const { business, capital, dispatch, index } = props\n  const canBuy = capital >= business.price\n\n  function buy() {\n    if (canBuy) {\n      dispatch(action.buyBusiness(index))\n    }\n  }\n\n  return (\n    <div\n      className={`Business Business-forSale ${canBuy ? '' : 'Business-locked'}`}\n    >\n      <div className=\"Business-body\">\n        <TileButton disabled={!canBuy} onClick={buy} role=\"secondary\">\n          <b>{business.name}</b>\n          <h2>{formatCurrency(business.price)}</h2>\n          <b>{canBuy ? 'BUY' : 'INSUFFICIENT FUNDS'}</b>\n        </TileButton>\n      </div>\n    </div>\n  )\n}\n\nexport default UnboughtBusiness\n","import React from 'react'\nimport * as Model from '../../Model'\nimport * as action from '../../action'\nimport { formatCurrency } from '../../util'\nimport BouncyLabel from '../BouncyLabel'\nimport TileButton from '../TileButton'\n\ninterface Props {\n  business: Model.Business\n  capital: number\n  dispatch: Model.Dispatch\n  index: number\n  upgradeMultiplier: Model.UpgradeMultiplier\n}\n\nconst UpgradeButton: React.FC<Props> = props => {\n  const { business, capital, dispatch, index, upgradeMultiplier } = props\n\n  const { multiplier, price } = resolveMultiplier(\n    business.price,\n    capital,\n    upgradeMultiplier\n  )\n  const canUpgrade = capital >= price\n\n  function upgrade() {\n    if (canUpgrade) {\n      dispatch(action.upgradeBusiness({ index, multiplier, price }))\n    }\n  }\n\n  return (\n    <TileButton disabled={!canUpgrade} onClick={upgrade} role=\"secondary\">\n      <b>BUY x{multiplier}</b>\n      <BouncyLabel>{business.level}</BouncyLabel>\n      <b>{formatCurrency(price)}</b>\n    </TileButton>\n  )\n}\n\nexport default UpgradeButton\n\n/**\n * Calculate the number of levels upgraded and the total price of the operation\n * based on the upgrade multiplier and available capital.\n */\nfunction resolveMultiplier(\n  currentPrice: number,\n  capital: number,\n  multiplier: Model.UpgradeMultiplier\n): { multiplier: number; price: number } {\n  const calculatePrice = (targetMultiplier: number) => {\n    let price = currentPrice\n    let result = price\n    for (let index = 1; index < targetMultiplier; index++) {\n      price *= Model.PRICE_LEVEL_MULTIPLIER\n      result += price\n    }\n    return Math.round(result)\n  }\n\n  // If multiplier is a number, simply apply it:\n  if (typeof multiplier === 'number') {\n    return { multiplier, price: calculatePrice(multiplier) }\n  }\n\n  // Otherwise calculate max available upgrades:\n  let maxMultiplier = 1\n  while (calculatePrice(maxMultiplier + 1) <= capital) {\n    maxMultiplier += 1\n  }\n  return { multiplier: maxMultiplier, price: calculatePrice(maxMultiplier) }\n}\n","import React from 'react'\nimport * as Model from '../../Model'\nimport CollectIncomeButton from './CollectIncomeButton'\nimport HireManagerButton from './HireManagerButton'\nimport UnboughtBusiness from './UnboughtBusiness'\nimport UpgradeButton from './UpgradeButton'\nimport './index.css'\n\ninterface Props {\n  business: Model.Business\n  capital: number\n  dispatch: Model.Dispatch\n  index: number\n  upgradeMultiplier: Model.UpgradeMultiplier\n}\n\nconst Business: React.FC<Props> = props => {\n  const { business } = props\n\n  if (business.level === 0) {\n    return <UnboughtBusiness {...props} />\n  }\n\n  return (\n    <div className=\"Business\">\n      <div className=\"Business-header\">\n        <b>{business.name}</b>\n      </div>\n      <div className=\"Business-body\">\n        <UpgradeButton {...props} />\n        <CollectIncomeButton {...props} />\n        {!business.hasManager && <HireManagerButton {...props} />}\n      </div>\n    </div>\n  )\n}\n\nexport default Business\n","import React from 'react'\nimport * as Model from '../Model'\nimport Business from './Business'\nimport './Businesses.css'\n\ninterface Props {\n  dispatch: Model.Dispatch\n  state: Model.State\n}\n\n/**\n * Render businesses responsively in 1 or 2 columns.\n */\nconst Businesses: React.FC<Props> = ({ dispatch, state }) => {\n  const halfway = Math.ceil(state.businesses.length / 2)\n\n  return (\n    <div className=\"Businesses\">\n      <div>\n        {state.businesses.slice(0, halfway).map((business, index) => (\n          <Business\n            key={index}\n            business={business}\n            capital={state.capital}\n            dispatch={dispatch}\n            index={index}\n            upgradeMultiplier={state.upgradeMultiplier}\n          />\n        ))}\n      </div>\n      <div>\n        {state.businesses.slice(halfway).map((business, index) => (\n          <Business\n            key={index}\n            business={business}\n            capital={state.capital}\n            dispatch={dispatch}\n            index={halfway + index}\n            upgradeMultiplier={state.upgradeMultiplier}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Businesses\n","import React from 'react'\nimport * as Model from '../Model'\n\ninterface Props {\n  dispatch: Model.Dispatch\n  value: Model.UpgradeMultiplier\n}\n\nconst UpgradeMultiplier: React.FC<Props> = ({ dispatch, value }) => {\n  return (\n    <button onClick={() => dispatch({ type: 'toggle-upgrade-multiplier' })}>\n      Buy\n      <h3>{value === 'max' ? 'Max available' : <>x{value}</>}</h3>\n      stores\n    </button>\n  )\n}\n\nexport default UpgradeMultiplier\n","import React, { useEffect } from 'react'\nimport useThunkReducer from 'react-hook-thunk-reducer'\nimport * as action from '../action'\nimport initialState from '../initialState'\nimport reducer from '../reducer'\nimport { formatCurrency } from '../util'\nimport './App.css'\nimport Businesses from './Businesses'\nimport UpgradeMultiplier from './UpgradeMultiplier'\n\nconst App: React.FC = () => {\n  const [state, dispatch] = useThunkReducer(reducer, initialState)\n\n  // Hydrate/persist state to localStorage when game is opened/closed:\n  useEffect(() => {\n    dispatch(action.hydrateState())\n\n    function onBeforeUnload() {\n      dispatch(action.persistState())\n    }\n\n    window.addEventListener('beforeunload', onBeforeUnload)\n    return () => window.removeEventListener('beforeunload', onBeforeUnload)\n  }, [dispatch])\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <h1>{formatCurrency(state.capital)}</h1>\n        <UpgradeMultiplier\n          dispatch={dispatch}\n          value={state.upgradeMultiplier}\n        />\n      </div>\n      <Businesses dispatch={dispatch} state={state} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}